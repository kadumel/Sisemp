@model Contexto.Models.RDM

@{
    ViewBag.Title = "Criar";
}
<br/>
<h2>Cadastro de Despesas</h2>
<br />

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*<div class="form-group">
            @Html.LabelFor(model => model.CODIGO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.CODIGO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CODIGO, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.ROT_CODIGO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RotaId", (IEnumerable<SelectListItem>)ViewBag.RotaId, "-- Selecione a rota --", new { @class = "form-control" })
                @*@Html.EditorFor(model => model.ROT_CODIGO, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.ROT_CODIGO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CRD_CODIGO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CrdId", (IEnumerable<SelectListItem>)ViewBag.CrdId, "-- Selecione a despesa --", new { @class = "form-control" })
                @*@Html.EditorFor(model => model.CRD_CODIGO, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.CRD_CODIGO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VALOR, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VALOR, new { htmlAttributes = new { @class = "form-control", @placeholder = "0.00" } })
                @Html.ValidationMessageFor(model => model.VALOR, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DATA, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DATA, new { htmlAttributes = new { @class = "form-control", @placeholder = "99/99/9999", @onKeyPress = "mascara(this, mdata)" } })
                @Html.ValidationMessageFor(model => model.DATA, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Voltar", "Lista")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
        function mascara(o, f) {
            v_obj = o
            v_fun = f
            setTimeout("execmascara()", 1)
        }

        function execmascara() {
            v_obj.value = v_fun(v_obj.value)
        }
        function mdata(v) {
            v = v.replace(/\D/g, "");                    //Remove tudo o que não é dígito
            v = v.replace(/(\d{2})(\d)/, "$1/$2");
            v = v.replace(/(\d{2})(\d)/, "$1/$2");

            v = v.replace(/(\d{2})(\d{2})$/, "$1$2");
            return v;
        }
</script>
}
